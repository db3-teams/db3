//
//
// rtstore_base.proto
// Copyright (C) 2022 rtstore.io Author imotai <codego.me@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


syntax = "proto3";

package rtstore_base_proto;
// the all types are supported by rtstore
enum RTStoreType {
    KBool = 0;
    // int16
    KSmallInt = 2;
    // int32
    KInt = 3;
    KBigInt = 4;
    KFloat = 5;
    KDouble = 6;
    KDate = 9;
    KDecimal = 10;
    //timestamp type
    KTimestampSecond = 11;
    KTimestampMillsSecond = 12;
    KTimestampMicroSecond = 13;
    // string type
    KStringUtf8 = 21;
}

enum CellType {
    KWritable = 0;
    kReadOnly = 1;
}

// the smallest storage unit in rtstore
message CellStatus {
    // start timestamp
    int64 start_ts = 1;
    // end timestamp
    int64 end_ts = 2;
    // total row in cells
    int64 num_rows = 3;
    int32 cell_id = 4;
    int32 partition_id = 5;
    string display = 6;
    string cell_store_uri = 7;
    CellType ctype = 8;
    int64 size_in_bytes = 9;
}

message CellDesc {
    string table_id = 1;
    int32 partition_id = 2;
    string cell_store_uri = 3;
}

// the logical storage unit for data group
message PartitionStatus {
    int32 partition_id = 1;
    int32 cell_count = 2;
    int64 num_rows = 3;
    string display = 4;
}

message RTStorePartitionDesc {
    repeated string columns = 2;
    int32 partition_count = 3;
    // range merge and split strategy
    int32 split_record_count = 5;
    int32 merge_record_count = 6;
    string range_column = 7;
}

message RTStoreColumnDesc {
    string name = 1;
    RTStoreType ctype = 2;
    bool null_allowed = 3;
}

message RTStoreSchemaDesc {
    repeated RTStoreColumnDesc columns = 1;
    int32 version = 2;
}

message RTStoreTableDesc {
    // the table name is like test.dev.table1
    repeated string names = 1;
    RTStoreSchemaDesc schema = 2;
    RTStorePartitionDesc partition_desc = 3;
    // the root path for storing data , eg s3://xxxx/xx
    string storage_uri = 4;
}
